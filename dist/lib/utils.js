"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.classNames = classNames;
exports.filterItems = filterItems;
exports.getItemIndex = getItemIndex;
exports.renderJsonStructure = renderJsonStructure;
exports.useHandleOpenCommandPalette = useHandleOpenCommandPalette;
var _CommandPalette = _interopRequireDefault(require("../components/CommandPalette"));
var _react = _interopRequireWildcard(require("react"));
var _excluded = ["id"];
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function getItemIndex(items, id) {
  var startIndex = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
  return items.map(function (list) {
    return list.items;
  }).reduce(function (a, b) {
    return a.concat(b);
  }).findIndex(function (i) {
    return i.id === id;
  }) + startIndex;
}
function filterItems(items, search) {
  var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {
      filterOnListHeading: true
    },
    filterOnListHeading = _ref.filterOnListHeading;
  return items.filter(function (list) {
    var _list$heading;
    var listHasMatchingItem = list.items.some(function (item) {
      var _item$keywords;
      return doesChildMatchSearch(search, item.children) || doesKeywordsMatchSearch(search, (_item$keywords = item.keywords) !== null && _item$keywords !== void 0 ? _item$keywords : []);
    });
    return filterOnListHeading ? ((_list$heading = list.heading) === null || _list$heading === void 0 ? void 0 : _list$heading.toLowerCase().includes(search.toLowerCase())) || listHasMatchingItem : listHasMatchingItem;
  }).map(function (list) {
    var matchingItems = list.items.filter(function (item) {
      var _item$keywords2;
      return doesChildMatchSearch(search, item.children) || doesKeywordsMatchSearch(search, (_item$keywords2 = item.keywords) !== null && _item$keywords2 !== void 0 ? _item$keywords2 : []);
    });
    return _objectSpread(_objectSpread({}, list), {}, {
      items: filterOnListHeading ? matchingItems.length ? matchingItems : list.items : matchingItems
    });
  });
}
function doesChildMatchSearch(search, children) {
  return children ? getLabelFromChildren(children).toLowerCase().includes(search.toLowerCase()) : false;
}
function doesKeywordsMatchSearch(search, keywords) {
  return keywords.includes("*") ? true : keywords.some(function (keyword) {
    return keyword.toLowerCase().includes(search.toLowerCase());
  });
}
function getLabelFromChildren(children) {
  var label = "";
  _react.Children.map(children, function (child) {
    if (typeof child === "string") {
      label += child;
    }
  });
  return label;
}
function classNames() {
  for (var _len = arguments.length, classes = new Array(_len), _key = 0; _key < _len; _key++) {
    classes[_key] = arguments[_key];
  }
  return classes.filter(Boolean).join(" ");
}
function renderJsonStructure(jsonStructure) {
  return jsonStructure.map(function (list) {
    return /*#__PURE__*/_react["default"].createElement(_CommandPalette["default"].List, {
      heading: list.heading,
      key: list.id
    }, list.items.map(function (_ref2) {
      var id = _ref2.id,
        rest = _objectWithoutProperties(_ref2, _excluded);
      return /*#__PURE__*/_react["default"].createElement(_CommandPalette["default"].ListItem, _extends({
        index: getItemIndex(jsonStructure, id),
        key: id
      }, rest));
    }));
  });
}
function useHandleOpenCommandPalette(setIsOpen) {
  (0, _react.useEffect)(function () {
    function handleKeyDown(e) {
      var _navigator;
      if (((_navigator = navigator) !== null && _navigator !== void 0 && (_navigator = _navigator.platform) !== null && _navigator !== void 0 && _navigator.toLowerCase().includes("mac") ? e.metaKey : e.ctrlKey) && e.key === "k") {
        e.preventDefault();
        e.stopPropagation();
        setIsOpen(function (currentValue) {
          return !currentValue;
        });
      }
    }
    document.addEventListener("keydown", handleKeyDown);
    return function () {
      document.removeEventListener("keydown", handleKeyDown);
    };
  }, []);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,