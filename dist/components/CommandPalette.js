"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _FreeSearchAction = _interopRequireDefault(require("./FreeSearchAction"));
var _Icon = _interopRequireDefault(require("./Icon"));
var _List = _interopRequireDefault(require("./List"));
var _ListItem = _interopRequireDefault(require("./ListItem"));
var _Page = _interopRequireDefault(require("./Page"));
var _react = _interopRequireWildcard(require("react"));
var _Search = _interopRequireDefault(require("./Search"));
var _context = require("../lib/context");
var _react2 = require("@headlessui/react");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function CommandPalette(_ref) {
  var selectedParent = _ref.selected,
    _ref$placeholder = _ref.placeholder,
    placeholder = _ref$placeholder === void 0 ? 'Search' : _ref$placeholder,
    onChangeSelected = _ref.onChangeSelected,
    onChangeSearch = _ref.onChangeSearch,
    onChangeOpen = _ref.onChangeOpen,
    renderLink = _ref.renderLink,
    children = _ref.children,
    isOpen = _ref.isOpen,
    footer = _ref.footer,
    search = _ref.search,
    page = _ref.page;
  var inputRef = (0, _react.useRef)(null);
  var _ref2 = typeof selectedParent === 'number' && onChangeSelected ? [selectedParent, onChangeSelected] : (0, _react.useState)(0),
    _ref3 = _slicedToArray(_ref2, 2),
    selected = _ref3[0],
    setSelected = _ref3[1];
  var _useState = (0, _react.useState)(),
    _useState2 = _slicedToArray(_useState, 2),
    searchPrefix = _useState2[0],
    setSearchPrefix = _useState2[1];
  function handleChangeSelected(direction) {
    var items = document.querySelectorAll('.command-palette-list-item');
    var index = 0;
    var newIndex = 0;
    var newItem;
    if (direction === 'down') {
      items.forEach(function (_, i) {
        if (i === selected) {
          index = i;
        }
      });
      newIndex = index === items.length - 1 ? 0 : index + 1;
    } else if (direction === 'up') {
      items.forEach(function (_, i) {
        if (i === selected) {
          index = i;
        }
      });
      newIndex = !index ? items.length - 1 : index - 1;
    } else {
      setSelected(0);
    }
    newItem = items[newIndex];
    if (newItem && typeof newIndex === 'number') {
      setSelected(newIndex);
      newItem.scrollIntoView({
        behavior: 'smooth',
        block: newIndex ? 'center' : 'end'
      });
    }
  }
  function handleSelect() {
    var items = document.querySelectorAll('.command-palette-list-item');
    var index = 0;
    var item;
    items.forEach(function (_, i) {
      if (i === selected) {
        index = i;
      }
    });
    item = items[index];
    if (item) {
      var _item$attributes$getN;
      item.click();
      if (((_item$attributes$getN = item.attributes.getNamedItem('data-close-on-select')) === null || _item$attributes$getN === void 0 ? void 0 : _item$attributes$getN.value) === 'true') {
        onChangeOpen(false);
      }
    }
  }
  (0, _react.useEffect)(function () {
    handleChangeSelected();
  }, [search]);
  (0, _react.useEffect)(function () {
    setSelected(0);
  }, [page]);
  return /*#__PURE__*/_react["default"].createElement("div", {
    onKeyDown: function onKeyDown(e) {
      if (e.key === 'ArrowDown' || e.ctrlKey && e.key === 'n' || e.ctrlKey && e.key === 'j') {
        e.preventDefault();
        e.stopPropagation();
        handleChangeSelected('down');
      } else if (e.key === 'ArrowUp' || e.ctrlKey && e.key === 'p' || e.ctrlKey && e.key === 'k') {
        e.preventDefault();
        e.stopPropagation();
        handleChangeSelected('up');
      } else if (e.key === 'Enter') {
        e.preventDefault();
        e.stopPropagation();
        handleSelect();
      }
    }
  }, /*#__PURE__*/_react["default"].createElement(_react2.Transition, {
    appear: true,
    show: isOpen,
    as: _react.Fragment
  }, /*#__PURE__*/_react["default"].createElement(_react2.Dialog, {
    initialFocus: inputRef,
    as: "div",
    className: "command-palette",
    onClose: function onClose() {
      onChangeOpen(false);
    }
  }, /*#__PURE__*/_react["default"].createElement("div", {
    className: "command-palette-content antialiased"
  }, /*#__PURE__*/_react["default"].createElement(_react2.Transition.Child, {
    as: _react.Fragment,
    enter: "ease-out duration-300",
    enterFrom: "opacity-0",
    enterTo: "opacity-100",
    leave: "ease-in duration-200",
    leaveFrom: "opacity-100",
    leaveTo: "opacity-0"
  }, /*#__PURE__*/_react["default"].createElement("div", {
    className: "fixed inset-0 bg-gray-900 bg-opacity-80"
  })), /*#__PURE__*/_react["default"].createElement("div", {
    className: "fixed inset-0 overflow-y-auto flex items-center justify-center"
  }, /*#__PURE__*/_react["default"].createElement("div", {
    className: "flex w-full h-[450px] items-start justify-center p-4"
  }, /*#__PURE__*/_react["default"].createElement(_react2.Transition.Child, {
    as: _react.Fragment,
    enter: "ease-out duration-300",
    enterFrom: "opacity-0 scale-95",
    enterTo: "opacity-100 scale-100",
    leave: "ease-in duration-200",
    leaveFrom: "opacity-100 scale-100",
    leaveTo: "opacity-0 scale-95"
  }, /*#__PURE__*/_react["default"].createElement(_react2.Dialog.Panel, {
    className: "w-full max-h-full bg-white dark:bg-neutral-900 shadow-lg rounded-lg max-w-xl flex flex-col overflow-hidden divide-y dark:divide-gray-800"
  }, /*#__PURE__*/_react["default"].createElement(_context.PageContext.Provider, {
    value: {
      setSearchPrefix: setSearchPrefix,
      searchPrefix: searchPrefix,
      page: page
    }
  }, /*#__PURE__*/_react["default"].createElement(_Search["default"], {
    onChange: onChangeSearch,
    placeholder: placeholder,
    prefix: searchPrefix,
    value: search,
    ref: inputRef
  })), /*#__PURE__*/_react["default"].createElement("div", {
    className: "flex-1 overflow-y-auto focus:outline-none p-2 space-y-4",
    tabIndex: -1
  }, /*#__PURE__*/_react["default"].createElement(_context.OpenContext.Provider, {
    value: {
      isOpen: isOpen,
      onChangeOpen: onChangeOpen
    }
  }, /*#__PURE__*/_react["default"].createElement(_context.PageContext.Provider, {
    value: {
      page: page,
      searchPrefix: searchPrefix,
      setSearchPrefix: setSearchPrefix
    }
  }, /*#__PURE__*/_react["default"].createElement(_context.SearchContext.Provider, {
    value: {
      search: search
    }
  }, /*#__PURE__*/_react["default"].createElement(_context.SelectContext.Provider, {
    value: {
      selected: selected
    }
  }, /*#__PURE__*/_react["default"].createElement(_context.RenderLinkContext.Provider, {
    value: {
      renderLink: renderLink
    }
  }, children)))))), footer))))))));
}
CommandPalette.Page = _Page["default"];
CommandPalette.List = _List["default"];
CommandPalette.ListItem = _ListItem["default"];
CommandPalette.Icon = _Icon["default"];
CommandPalette.FreeSearchAction = _FreeSearchAction["default"];
var _default = CommandPalette;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,